"use client";

import React, { useState, Suspense, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAppStore } from '../../store/useStore';
import { Button, Card, Input, Tabs, ConfirmDialog } from '../../components/ui';
import Link from 'next/link';
import { IoArrowBack } from 'react-icons/io5';
import { IoMdPerson, IoMdPeople } from 'react-icons/io';
import { FaEquals, FaPercentage, FaBalanceScale } from 'react-icons/fa';
import { TbMathSymbols } from 'react-icons/tb';
import { BsPersonFillAdd } from 'react-icons/bs';

// Create a component that uses useSearchParams
function TransactionForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const preselectedFriendId = searchParams.get('friend');
  const isPartialPayment = searchParams.get('type') === 'partial';
  
  const { friends, addTransaction, transactions, currency } = useAppStore();
  const [transactionType, setTransactionType] = useState<'lent' | 'received'>('lent');
  const [isGroupExpense, setIsGroupExpense] = useState<boolean>(false);
  const [friendId, setFriendId] = useState(preselectedFriendId || '');
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState(isPartialPayment ? 'Partial Payment' : '');
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
  
  // Group expense related states
  const [selectedFriends, setSelectedFriends] = useState<string[]>(preselectedFriendId ? [preselectedFriendId] : []);
  const [splitType, setSplitType] = useState<'equal' | 'percentage' | 'ratio' | 'exact'>('equal');
  const [customSplits, setCustomSplits] = useState<{[key: string]: number}>({});
  const [shouldSplitWithYou, setShouldSplitWithYou] = useState<boolean>(true);

  // If it's a partial payment, determine the default transaction type
  useEffect(() => {
    if (isPartialPayment && preselectedFriendId) {
      // Calculate balance
      const lent = transactions
        .filter(t => t.friendId === preselectedFriendId && t.type === 'lent')
        .reduce((sum, t) => sum + t.amount, 0);
        
      const received = transactions
        .filter(t => t.friendId === preselectedFriendId && t.type === 'received')
        .reduce((sum, t) => sum + t.amount, 0);
        
      const balance = lent - received;
      
      // If balance is positive, friend owes user, so default to "received"
      // If balance is negative, user owes friend, so default to "lent"
      if (balance > 0) {
        setTransactionType('received');
      } else if (balance < 0) {
        setTransactionType('lent');
      }
    }
  }, [isPartialPayment, preselectedFriendId, transactions]);
  
  // Reset the selected friends when toggling group expense
  useEffect(() => {
    if (isGroupExpense) {
      if (friendId) {
        setSelectedFriends([friendId]);
      } else {
        setSelectedFriends([]);
      }
      setFriendId('');
    } else {
      if (selectedFriends.length > 0) {
        setFriendId(selectedFriends[0]);
      }
      setSelectedFriends([]);
    }
  }, [isGroupExpense, friendId, selectedFriends]);
  
  // Calculate the splits based on the selected split type
  const calculateSplits = (): {[key: string]: number} => {
    if (!amount || selectedFriends.length === 0) return {};
    
    const totalAmount = parseFloat(amount);
    const splits: {[key: string]: number} = {};
    
    // Number of people to split with (including you if shouldSplitWithYou is true)
    const numPeople = shouldSplitWithYou ? selectedFriends.length + 1 : selectedFriends.length;
    
    switch (splitType) {
      case 'equal':
        const equalShare = parseFloat((totalAmount / numPeople).toFixed(2));
        selectedFriends.forEach(id => {
          splits[id] = equalShare;
        });
        break;
        
      case 'percentage':
        // Use the custom percentages provided
        let totalPercentage = 0;
        selectedFriends.forEach(id => {
          totalPercentage += customSplits[id] || 0;
        });
        
        if (shouldSplitWithYou) {
          // Calculate your percentage as the remaining
          const remainingPercentage = Math.max(0, 100 - totalPercentage);
          // Your share doesn't need to be in splits
          
          if (totalPercentage > 100) {
            // Adjust the percentages proportionally
            const factor = 100 / totalPercentage;
            selectedFriends.forEach(id => {
              splits[id] = parseFloat(((customSplits[id] || 0) * factor * totalAmount / 100).toFixed(2));
            });
          } else {
            selectedFriends.forEach(id => {
              splits[id] = parseFloat(((customSplits[id] || 0) * totalAmount / 100).toFixed(2));
            });
          }
        } else {
          if (totalPercentage !== 100) {
            // Adjust the percentages proportionally
            const factor = 100 / totalPercentage;
            selectedFriends.forEach(id => {
              splits[id] = parseFloat(((customSplits[id] || 0) * factor * totalAmount / 100).toFixed(2));
            });
          } else {
            selectedFriends.forEach(id => {
              splits[id] = parseFloat(((customSplits[id] || 0) * totalAmount / 100).toFixed(2));
            });
          }
        }
        break;
        
      case 'ratio':
        // Use the custom ratios provided
        let totalRatio = 0;
        selectedFriends.forEach(id => {
          totalRatio += customSplits[id] || 1; // Default ratio is 1
        });
        
        if (shouldSplitWithYou) {
          // Add your ratio (default 1)
          totalRatio += 1;
        }
        
        selectedFriends.forEach(id => {
          const ratio = customSplits[id] || 1;
          splits[id] = parseFloat(((ratio / totalRatio) * totalAmount).toFixed(2));
        });
        break;
        
      case 'exact':
        // Use the exact amounts provided
        selectedFriends.forEach(id => {
          splits[id] = customSplits[id] || 0;
        });
        break;
    }
    
    return splits;
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate inputs
    if ((!friendId && !isGroupExpense) || !amount || !description || !date) {
      alert('Please fill in all required fields');
      return;
    }
    
    if (isGroupExpense && selectedFriends.length === 0) {
      alert('Please select at least one friend to split with');
      return;
    }
    
    if (isGroupExpense) {
      // Calculate the splits
      const splitAmounts = calculateSplits();
      
      // Create a transaction for each friend
      Object.entries(splitAmounts).forEach(([friendId, amount]) => {
        addTransaction({
          friendId,
          amount,
          type: transactionType,
          description: `${description} (Group)`,
          date: new Date(date).toISOString(),
        });
      });
      
      // Navigate back to transactions
      router.push('/transactions');
    } else {
      // Regular transaction
      addTransaction({
        friendId,
        amount: parseFloat(amount),
        type: transactionType,
        description,
        date: new Date(date).toISOString(),
      });
      
      // Navigate back
      router.push(`/settle-up?id=${friendId}`);
    }
  };

  // Toggle friend selection for group expense
  const toggleFriendSelection = (id: string) => {
    if (selectedFriends.includes(id)) {
      setSelectedFriends(prev => prev.filter(fid => fid !== id));
      // Also remove from custom splits
      const newSplits = {...customSplits};
      delete newSplits[id];
      setCustomSplits(newSplits);
    } else {
      setSelectedFriends(prev => [...prev, id]);
      // Initialize custom split values
      if (splitType === 'percentage') {
        setCustomSplits(prev => ({...prev, [id]: 0}));
      } else if (splitType === 'ratio') {
        setCustomSplits(prev => ({...prev, [id]: 1}));
      } else if (splitType === 'exact') {
        setCustomSplits(prev => ({...prev, [id]: 0}));
      }
    }
  };
  
  // Update custom split values
  const updateCustomSplit = (friendId: string, value: number) => {
    setCustomSplits(prev => ({
      ...prev,
      [friendId]: value
    }));
  };

  const getSelectedFriend = () => {
    if (!preselectedFriendId) return null;
    return friends.find(f => f.id === preselectedFriendId);
  };

  const selectedFriend = getSelectedFriend();
  
  // Calculate total from custom splits
  const calculateTotalFromSplits = () => {
    if (splitType === 'exact') {
      return Object.values(customSplits).reduce((sum, val) => sum + (val as number), 0);
    }
    return parseFloat(amount || '0');
  };
  
  // Calculate remaining amount in custom splits
  const calculateRemainingAmount = () => {
    if (!amount) return 0;
    
    const totalAmount = parseFloat(amount);
    const totalAssigned = Object.values(customSplits).reduce((sum, val) => sum + (val as number), 0);
    
    if (splitType === 'exact') {
      return totalAmount - totalAssigned;
    } else if (splitType === 'percentage') {
      const totalPercentage = Object.values(customSplits).reduce((sum, val) => sum + (val as number), 0);
      return shouldSplitWithYou ? 100 - totalPercentage : 100 - totalPercentage;
    }
    
    return 0;
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {isPartialPayment && (
        <div className="bg-blue-50 text-blue-800 dark:bg-blue-900 dark:text-blue-100 p-4 rounded-lg mb-4">
          <h3 className="font-medium mb-1">Adding Partial Payment</h3>
          <p className="text-sm">
            {selectedFriend ? `Recording a partial payment with ${selectedFriend.name}` : 'Recording a partial payment'}
          </p>
        </div>
      )}
      
      <div>
        <label className="block mb-1.5 text-sm font-medium text-foreground/80">
          Expense Type
        </label>
        <div className="flex items-center gap-3 mb-2">
          <div
            onClick={() => setIsGroupExpense(false)}
            className={`flex flex-1 items-center gap-2 p-3 border rounded-lg cursor-pointer ${
              !isGroupExpense ? 'bg-accent/10 border-accent' : 'border-element-border'
            }`}
          >
            <IoMdPerson className="text-xl" />
            <span>Individual</span>
          </div>
          <div
            onClick={() => setIsGroupExpense(true)}
            className={`flex flex-1 items-center gap-2 p-3 border rounded-lg cursor-pointer ${
              isGroupExpense ? 'bg-accent/10 border-accent' : 'border-element-border'
            }`}
          >
            <IoMdPeople className="text-xl" />
            <span>Group Expense</span>
          </div>
        </div>
      </div>
    
      <div>
        <label className="block mb-1.5 text-sm font-medium text-foreground/80">
          Transaction Type
        </label>
        <Tabs 
          tabs={[
            { id: 'lent', label: 'You Paid' },
            { id: 'received', label: 'Friend Paid' },
          ]}
          activeTab={transactionType}
          onChange={(id) => setTransactionType(id as 'lent' | 'received')}
          preventDefault={true} // Prevent default form submission
        />
      </div>
      
      {!isGroupExpense ? (
        <div>
          <label className="block mb-1.5 text-sm font-medium text-foreground/80">
            Select Friend
          </label>
          <select 
            className="w-full py-2.5 px-3 rounded-lg bg-element-bg shadow-sm focus:outline-none focus:ring-2 focus:ring-accent/30 transition-all duration-300"
            value={friendId}
            onChange={(e) => setFriendId(e.target.value)}
            disabled={!!preselectedFriendId}
            required={!isGroupExpense}
          >
            <option value="">Select a friend</option>
            {friends.map(friend => (
              <option key={friend.id} value={friend.id}>{friend.name}</option>
            ))}
          </select>
        </div>
      ) : (
        <div>
          <label className="flex justify-between items-center mb-1.5">
            <span className="text-sm font-medium text-foreground/80">Select Friends to Split With</span>
            <span className="text-xs text-accent">{selectedFriends.length} selected</span>
          </label>
          <div className="bg-element-bg rounded-lg p-2 max-h-40 overflow-y-auto">
            {friends.map(friend => (
              <div 
                key={friend.id}
                onClick={() => toggleFriendSelection(friend.id)}
                className={`flex items-center gap-2 p-2 rounded cursor-pointer mb-1 ${
                  selectedFriends.includes(friend.id) ? 'bg-accent/10 border-accent' : 'hover:bg-background'
                }`}
              >
                <input 
                  type="checkbox" 
                  checked={selectedFriends.includes(friend.id)}
                  onChange={() => {}} // Handled by onClick on parent
                  className="h-4 w-4 accent-accent"
                />
                <span>{friend.name}</span>
              </div>
            ))}
          </div>
        </div>
      )}
      
      <div>
        <label className="block mb-1.5 text-sm font-medium text-foreground/80">
          Amount
        </label>
        <div className="relative">
          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-foreground/70">
            {currency}
          </span>
          <input
            type="number"
            placeholder="Enter amount"
            className="w-full py-2.5 px-3 pl-7 rounded-lg bg-element-bg shadow-sm focus:outline-none focus:ring-2 focus:ring-accent/30 transition-all duration-300"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            min="0.01"
            step="0.01"
            required
          />
        </div>
      </div>
      
      {isGroupExpense && selectedFriends.length > 0 && (
        <div>
          <label className="block mb-1.5 text-sm font-medium text-foreground/80">
            Split Method
          </label>
          <div className="grid grid-cols-2 gap-2 mb-4">
            <div
              onClick={() => setSplitType('equal')}
              className={`flex items-center gap-2 p-3 border rounded-lg cursor-pointer ${
                splitType === 'equal' ? 'bg-accent/10 border-accent' : 'border-element-border'
              }`}
            >
              <FaEquals className="text-xl" />
              <span>Equal</span>
            </div>
            <div
              onClick={() => setSplitType('percentage')}
              className={`flex items-center gap-2 p-3 border rounded-lg cursor-pointer ${
                splitType === 'percentage' ? 'bg-accent/10 border-accent' : 'border-element-border'
              }`}
            >
              <FaPercentage className="text-xl" />
              <span>Percentage</span>
            </div>
            <div
              onClick={() => setSplitType('ratio')}
              className={`flex items-center gap-2 p-3 border rounded-lg cursor-pointer ${
                splitType === 'ratio' ? 'bg-accent/10 border-accent' : 'border-element-border'
              }`}
            >
              <FaBalanceScale className="text-xl" />
              <span>Ratio</span>
            </div>
            <div
              onClick={() => setSplitType('exact')}
              className={`flex items-center gap-2 p-3 border rounded-lg cursor-pointer ${
                splitType === 'exact' ? 'bg-accent/10 border-accent' : 'border-element-border'
              }`}
            >
              <TbMathSymbols className="text-xl" />
              <span>Exact</span>
            </div>
          </div>
          
          <div className="flex items-center gap-2 mb-3">
            <input
              type="checkbox"
              id="splitWithYou"
              checked={shouldSplitWithYou}
              onChange={(e) => setShouldSplitWithYou(e.target.checked)}
              className="h-4 w-4 accent-accent"
            />
            <label htmlFor="splitWithYou" className="text-sm">Include yourself in the split</label>
          </div>
          
          {/* Show custom split options based on the split type */}
          {splitType !== 'equal' && (
            <div className="bg-element-bg rounded-lg p-3 mb-3">
              <h3 className="font-medium mb-2">
                {splitType === 'percentage' ? 'Percentages' : splitType === 'ratio' ? 'Ratio' : 'Amounts'}
              </h3>
              
              {shouldSplitWithYou && (
                <div className="flex items-center justify-between py-2 border-b">
                  <span>You</span>
                  <span className="text-sm">
                    {splitType === 'percentage' && `${calculateRemainingAmount().toFixed(0)}%`}
                    {splitType === 'ratio' && '1'}
                    {splitType === 'exact' && `${currency}${(parseFloat(amount || '0') - calculateTotalFromSplits()).toFixed(2)}`}
                  </span>
                </div>
              )}
              
              {selectedFriends.map(friendId => {
                const friend = friends.find(f => f.id === friendId);
                if (!friend) return null;
                
                return (
                  <div key={friendId} className="flex items-center justify-between py-2 border-b">
                    <span>{friend.name}</span>
                    <div className="flex items-center">
                      {splitType === 'percentage' && <span className="mr-1">%</span>}
                      {splitType === 'exact' && <span className="mr-1">{currency}</span>}
                      <input
                        type="number"
                        className="w-16 py-1 px-2 rounded bg-background"
                        value={customSplits[friendId] || ''}
                        onChange={(e) => updateCustomSplit(friendId, parseFloat(e.target.value) || 0)}
                        min="0"
                        step={splitType === 'exact' ? '0.01' : '1'}
                      />
                    </div>
                  </div>
                );
              })}
              
              {splitType === 'exact' && (
                <div className="flex justify-between items-center mt-2 pt-2 border-t">
                  <span className="font-medium">Total:</span>
                  <span>
                    {currency}{calculateTotalFromSplits().toFixed(2)} / {currency}{amount || '0'}
                  </span>
                </div>
              )}
              
              {splitType === 'percentage' && (
                <div className="flex justify-between items-center mt-2 pt-2 border-t">
                  <span className="font-medium">Total:</span>
                  <span>
                    {Object.values(customSplits).reduce((sum, val) => sum + (val as number), 0)}% / 100%
                  </span>
                </div>
              )}
            </div>
          )}
          
          {splitType === 'equal' && (
            <div className="bg-element-bg rounded-lg p-3 mb-3">
              <div className="flex justify-between items-center">
                <span>Each person pays:</span>
                <span className="font-medium">
                  {currency}{amount && (parseFloat(amount) / (selectedFriends.length + (shouldSplitWithYou ? 1 : 0))).toFixed(2)}
                </span>
              </div>
            </div>
          )}
        </div>
      )}
      
      <Input
        label="Description"
        placeholder="What was this for?"
        fullWidth
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        required
      />
      
      <Input
        label="Date"
        type="date"
        fullWidth
        value={date}
        onChange={(e) => setDate(e.target.value)}
        required
      />
      
      <div className="pt-4">
        <Button type="submit" fullWidth>
          {isPartialPayment ? "Add Partial Payment" : isGroupExpense ? "Add Group Expense" : "Add Transaction"}
        </Button>
      </div>
    </form>
  );
}

// Loading fallback component
function LoadingForm() {
  return <div className="p-6">Loading transaction form...</div>;
}

export default function AddTransactionPage() {
  return (
    <div className="p-6 pb-20">
      <Suspense fallback={<LoadingForm />}>
        <AddTransactionContent />
      </Suspense>
    </div>
  );
}

function AddTransactionContent() {
  const searchParams = useSearchParams();
  const isPartialPayment = searchParams.get('type') === 'partial';

  return (
    <>
      <header className="mb-6 flex items-center gap-2">
        <Link href="/transactions" className="p-1">
          <IoArrowBack />
        </Link>
        <h1 className="text-2xl font-bold">
          {isPartialPayment ? "Record Partial Payment" : "Record Transaction"}
        </h1>
      </header>
      
      <TransactionForm />
    </>
  );
}
